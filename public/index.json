[
{
	"uri": "/2-preparation/2.1-createrepo/",
	"title": "Create GitHub Repository",
	"tags": [],
	"description": "",
	"content": " Go to GitHub and log in. Create new repository name FCJ-CICD-CDK-Beanstalk-Workshop.  3. After repository created successfully, save its HTTPS link to use later.\n4. Go to GitHub Setting, click Developer settings.\n5. At Personal access tokens, choose Tokens (clasic).\n6. Click Generate new token. 7. Click Generate new token (classic).\n8. Input Access token for FCJ Workshop at Note.\n9. At Scope field, choose repo (to read the repository) and admin:repo_hook (if you plan to use webhooks).\n10. Then, click Generate token.\n11. Save the token to use later.\n"
},
{
	"uri": "/",
	"title": "Deploy Web App With Elastic Beanstalk and CDK Pipelines",
	"tags": [],
	"description": "",
	"content": "Deploy Web App With Elastic Beanstalk and CDK Pipelines Overview In this workshop, we will demonstrate how to create CICD Pipelines with CDK to deploy an application into Elastic Beanstalk automatically. Content  Introduction Preparation  2.1 Create GitHub Repository 2.2 Set up environment   Build web application Create infrastructure using CDK Add Elastic BeanStalk to CDK Create CDK Pipeline stack Deploy application Check result Clean up resources  "
},
{
	"uri": "/1-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": " CDK: Is a software development framework that helps you define and provision AWS Cloud infrastructure in code. AWS CodePipeline: Is a CI/CD service that helps you quickly model and configure the different stages of a software release and automate the steps required to release software changes continuously. CloudFormation: Helps you set up AWS resources, provision them quickly and consistently, and manage them throughout their lifecycle across AWS accounts and Regions. Github: Is a version control service that helps you privately store and manage Git repositories. Elastic Beanstalk: Helps you quickly deploy and manage applications in the AWS Cloud without having to learn about the infrastructure that runs those applications.   "
},
{
	"uri": "/2-preparation/",
	"title": "Preparation",
	"tags": [],
	"description": "",
	"content": "Overview Before starting this workshop, we need to create:\n A GitHub repository to contain the application and infrastructure as code. A development environment for coding.  Content 2.1 Create GitHub Repository.\n2.2 Set up environment.\n"
},
{
	"uri": "/2-preparation/2.2-setupenv/",
	"title": "Set up environment",
	"tags": [],
	"description": "",
	"content": " Go to Cloud9. Click Create environment.   Input name FCJ-Env.\n  Input description Cloud9 environment for FCJ Workshop.\n  At Environment type, choose New EC2 instance.\n  At Instance type, choose Additional instance types.\n  At Additional instance types, choose t2.medium.\n   Scroll down.\n  Then, click Create.\n  After your environment is created successfully, click Open to access to environment.\n  11. In the terminal, check npm, cdk and node version.\n\rnpm --version\r \rcdk --version\r \rnode --version\r \rUpgrade npm version to latest.  npm install -g npm@latest\r \rUpgrade cdk version to latest.  npm install --force -g aws-cdk@latest\r \r"
},
{
	"uri": "/3-buildapp/",
	"title": "Build web application",
	"tags": [],
	"description": "",
	"content": "Create the client app  Create new directory.  mkdir my_webapp\rcd my_webapp\r \rThen we can initialize the Node.js project.  npm init -y\r \rCreate Express app  Install Express.  npm install express\r \rAfter running this command, we will see the dependency appear in the package.json file. Additionally, the node_modules directory and package-lock.json files are created.  Create new file name app.js.  touch app.js\r \rSelect file app.js and paste this code. Then save it.  var express = require('express');\rvar app = express();\rvar fs = require('fs');\rvar port = 8080;\rapp.listen(port, function() {\rconsole.log('Server running at http://127.0.0.1:', port);\r});\r \rCreate a REST API  Add the following code in the app.js file.  var express = require('express');\rvar app = express();\rvar fs = require('fs');\rvar port = 8080;\r/*global html*/\r// New code\rapp.get('/test', function (req, res) {\rres.send('the REST endpoint test run!');\r});\rapp.get('/', function (req, res) {\rhtml = fs.readFileSync('index.html');\rres.writeHead(200);\rres.write(html);\rres.end();\r});\rapp.listen(port, function() {\rconsole.log('Server running at http://127.0.0.1:%s', port);\r});\r \rCreate HTML content  Create file name index.html.  touch index.html\r \rSelect file index.html. Then paste the code below and save.  \u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;Elastic Beanstalk App\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;Welcome to the FCJ Workshop\u0026lt;/h1\u0026gt;\r\u0026lt;a href=\u0026quot;/test\u0026quot;\u0026gt;Call the test API\u0026lt;/a\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r \rRunning the code locally  Select file package.json. Update package.json with script and save.  \u0026quot;scripts\u0026quot;: {\r\u0026quot;start\u0026quot;: \u0026quot;node app.js\u0026quot;\r},\r \rIn terminal, run command.  npm start\r \rGo to the link that appear to see the result.  "
},
{
	"uri": "/4-createinfrausingcdk/",
	"title": "Create insfratructure using CDK",
	"tags": [],
	"description": "",
	"content": "Create the CDK app  Create new directory and move to that directory.  cd ..\rmkdir cdk-pipeline-eb-demo\rcd cdk-pipeline-eb-demo\r \rIf your NodeJS application is still running, press Ctrl + C to stop.\n\rInitialize the CDK application that we will use to create the infrastructure.  npx cdk init app --language typescript\r \rInitiate a local git repository.  git branch -m main\r \rMove the Application into GitHub  After the GitHub repository is created, we will push the local application files to it. Move the application source files into new folder src.  cp -r ../my_webapp ./src\recho '!src/*' \u0026gt;\u0026gt; .gitignore\recho 'src/package-lock.json' \u0026gt;\u0026gt; .gitignore\recho 'src/node_modules' \u0026gt;\u0026gt; .gitignore\r \rPush all files to GitHub. Ensure to replace YOUR_USERNAME with your github org and YOUR_REPOSITORY with your repository name.  git add .\rgit commit -m \u0026quot;initial commit\u0026quot;\rgit remote add origin https://github.com/YOUR_USERNAME/YOUR_REPOSITORY.git git config credential.helper 'cache --timeout=3600'\rgit push -u origin main\r \rYou will be asked the Username and Password for the first time.  Password is the access token of your GitHub account had been generated at step 2.1- Create GitHub repository\n\rCreate the code for the resource stack We are going to delete the default file created by CDK and define our own code for all the ElasticBeanstalk resources stack.\n At ./cdk-pipeline-eb-demo/lib, delete file cdk-pipeline-eb-demo.ts. Create new file name eb-appln-stack.ts. Paste the following code and save.  import * as cdk from 'aws-cdk-lib';\rimport { Construct } from 'constructs';\r// Add import statements here\rexport interface EBEnvProps extends cdk.StackProps {\r// Autoscaling group configuration\rminSize?: string;\rmaxSize?: string;\rinstanceTypes?: string;\renvName?: string;\r}\rexport class EBApplnStack extends cdk.Stack {\rconstructor(scope: Construct, id: string, props?: EBEnvProps) {\rsuper(scope, id, props);\r// The code that defines your stack goes here\r}\r}\r \rA resource stack is a set of cloud infrastructure resources—all AWS resources in this case—that will be provisioned into a specific account. The account where these resources will be provisioned is the stack that you configured in the prerequisite. In this resource stack, we are going to create these resources:\n IAM Instance profile and role: A container for an AWS Identity and Access Management (IAM) role that we can use to pass role information to an Amazon EC2 instance when the instance starts. S3 Assets: This helps us to upload the zipped application into Amazon Simple Storage Service (S3) and will provide the CDK application a way to get the object location. Elastic Beanstalk App: A logical collection of Elastic Beanstalk components, including environments, versions, and environment configurations. Elastic Beanstalk App Version: A specific, labeled iteration of deployable code for a web application. An application version points to an Amazon S3 object that contains the deployable code, in this case, the zip file that we will be uploading to S3 using S3 Assets. Applications can have many versions and each application version is unique. Elastic Beanstalk Environment: A collection of AWS resources running an application version. Each environment runs only one application version at a time.  Upload the App to S3 Automatically  In the lib/eb-appln-stack.ts file, add the dependency to the top of the file.  import * as s3assets from 'aws-cdk-lib/aws-s3-assets';\r \rUnder the commented line that says The code that defines your stack goes here add the following code:  // Construct an S3 asset Zip from directory up.\rconst webAppZipArchive = new s3assets.Asset(this, 'WebAppZip', {\rpath: `${__dirname}/../src`,\r});\r \r"
},
{
	"uri": "/5-addbeanstalkcdk/",
	"title": "Add the Elastic Beanstalk CDK",
	"tags": [],
	"description": "",
	"content": "Add the Elastic Beanstalk CDK Dependencies Next, we will create the Elastic Beanstalk application, application version, and environment so that we can deploy the web app that we just uploaded to S3 using S3 Assets.\n Add the dependency to the Elastic Beanstalk module for CDK at the top of the lib/eb-appln-stack.ts file.  import * as elasticbeanstalk from 'aws-cdk-lib/aws-elasticbeanstalk';\r \rPut this code under the code of the S3 Assets in the lib/eb-appln-stack.ts file. This code will create the application with the name MyWebApp in Elastic Beanstalk.  const appName = 'MyWebApp';\rconst app = new elasticbeanstalk.CfnApplication(this, 'Application', {\rapplicationName: appName,\r});\r \rCreate Elastic Beanstalk Application Version Now we need to create an application version from the S3 asset that we created earlier.\n This piece of code will create the app version using the S3 bucket name and S3 object key that S3 Assets and CDK will provide to this method.  // Create an app version from the S3 asset defined earlier\rconst appVersionProps = new elasticbeanstalk.CfnApplicationVersion(this, 'AppVersion', {\rapplicationName: appName,\rsourceBundle: {\rs3Bucket: webAppZipArchive.s3BucketName,\rs3Key: webAppZipArchive.s3ObjectKey,\r},\r});\r \rAdding a dependency to make sure that the Elastic Beanstalk application exists before creating the app version.  // Make sure that Elastic Beanstalk app exists before creating an app version\rappVersionProps.addDependency(app);\r \rCreate the Instance Profile To create the Elastic Beanstalk environment, we will need to provide an existing instance profile name to pass role information to an Amazon EC2 instance when the instance starts.\n Import the IAM module dependency in the CDK stack we have been working on.  import * as iam from 'aws-cdk-lib/aws-iam';\r \rCreating the application version:  The first thing the code does is to create a new IAM role (myRole). To allow the EC2 instances in our environment to assume the role, the instance profile specifies Amazon EC2 as a trusted entity in the trust relationship policy. To that role we then add the managed policy AWSElasticBeanstalkWebTier. We then create the instance profile with that role and the profile name.    // Create role and instance profile\rconst myRole = new iam.Role(this, `${appName}-aws-elasticbeanstalk-ec2-role`, {\rassumedBy: new iam.ServicePrincipal('ec2.amazonaws.com'),\r});\rconst managedPolicy = iam.ManagedPolicy.fromAwsManagedPolicyName('AWSElasticBeanstalkWebTier')\rmyRole.addManagedPolicy(managedPolicy);\rconst myProfileName = `${appName}-InstanceProfile`\rconst instanceProfile = new iam.CfnInstanceProfile(this, myProfileName, {\rinstanceProfileName: myProfileName,\rroles: [\rmyRole.roleName\r]\r});\r \rCreate Elastic Beanstalk Environment The last part we need to create is the Elastic Beanstalk environment. The environment is a collection of AWS resources running an application version. For the environment, we will need to give some information about the infrastructure.\n To define the configuration options, add the following lines of code:  // Example of some options which can be configured\rconst optionSettingProperties: elasticbeanstalk.CfnEnvironment.OptionSettingProperty[] = [\r{\rnamespace: 'aws:autoscaling:launchconfiguration',\roptionName: 'IamInstanceProfile',\rvalue: myProfileName,\r},\r{\rnamespace: 'aws:autoscaling:asg',\roptionName: 'MinSize',\rvalue: props?.maxSize ?? '1',\r},\r{\rnamespace: 'aws:autoscaling:asg',\roptionName: 'MaxSize',\rvalue: props?.maxSize ?? '1',\r},\r{\rnamespace: 'aws:ec2:instances',\roptionName: 'InstanceTypes',\rvalue: props?.instanceTypes ?? 't2.micro',\r},\r];\r \rAdd following code in the stack definition file lib/eb-appln-stack.ts:  // Create an Elastic Beanstalk environment to run the application\rconst elbEnv = new elasticbeanstalk.CfnEnvironment(this, 'Environment', {\renvironmentName: props?.envName ?? \u0026quot;MyWebAppEnvironment\u0026quot;,\rapplicationName: app.applicationName || appName,\rsolutionStackName: 'SOLUTION-STACK-NAME',\roptionSettings: optionSettingProperties,\rversionLabel: appVersionProps.ref,\r});\r \rReplace SOLUTION-STACK-NAME with Latest Supported Solution Stack Name here. At this time, latest version is 64bit Amazon Linux 2023 v6.0.2 running Node.js 18.   Finally, source code of file lib/eb-appln-stack.ts is below: import * as cdk from 'aws-cdk-lib';\rimport { Construct } from 'constructs';\r// Add import statements here\rimport * as s3assets from 'aws-cdk-lib/aws-s3-assets';\rimport * as elasticbeanstalk from 'aws-cdk-lib/aws-elasticbeanstalk';\rimport * as iam from 'aws-cdk-lib/aws-iam';\rexport interface EBEnvProps extends cdk.StackProps {\r// Autoscaling group configuration\rminSize?: string;\rmaxSize?: string;\rinstanceTypes?: string;\renvName?: string;\r}\rexport class EBApplnStack extends cdk.Stack {\rconstructor(scope: Construct, id: string, props?: EBEnvProps) {\rsuper(scope, id, props);\r// The code that defines your stack goes here\r// Construct an S3 asset Zip from directory up.\rconst webAppZipArchive = new s3assets.Asset(this, 'WebAppZip', {\rpath: `${__dirname}/../src`,\r});\rconst appName = 'MyWebApp';\rconst app = new elasticbeanstalk.CfnApplication(this, 'Application', {\rapplicationName: appName,\r});\r// Create an app version from the S3 asset defined earlier\rconst appVersionProps = new elasticbeanstalk.CfnApplicationVersion(this, 'AppVersion', {\rapplicationName: appName,\rsourceBundle: {\rs3Bucket: webAppZipArchive.s3BucketName,\rs3Key: webAppZipArchive.s3ObjectKey,\r},\r});\r// Make sure that Elastic Beanstalk app exists before creating an app version\rappVersionProps.addDependency(app);\r// Create role and instance profile\rconst myRole = new iam.Role(this, `${appName}-aws-elasticbeanstalk-ec2-role`, {\rassumedBy: new iam.ServicePrincipal('ec2.amazonaws.com'),\r});\rconst managedPolicy = iam.ManagedPolicy.fromAwsManagedPolicyName('AWSElasticBeanstalkWebTier')\rmyRole.addManagedPolicy(managedPolicy);\rconst myProfileName = `${appName}-InstanceProfile`\rconst instanceProfile = new iam.CfnInstanceProfile(this, myProfileName, {\rinstanceProfileName: myProfileName,\rroles: [\rmyRole.roleName\r]\r});\r// Example of some options which can be configured\rconst optionSettingProperties: elasticbeanstalk.CfnEnvironment.OptionSettingProperty[] = [\r{\rnamespace: 'aws:autoscaling:launchconfiguration',\roptionName: 'IamInstanceProfile',\rvalue: myProfileName,\r},\r{\rnamespace: 'aws:autoscaling:asg',\roptionName: 'MinSize',\rvalue: props?.maxSize ?? '1',\r},\r{\rnamespace: 'aws:autoscaling:asg',\roptionName: 'MaxSize',\rvalue: props?.maxSize ?? '1',\r},\r{\rnamespace: 'aws:ec2:instances',\roptionName: 'InstanceTypes',\rvalue: props?.instanceTypes ?? 't2.micro',\r},\r];\r// Create an Elastic Beanstalk environment to run the application\rconst elbEnv = new elasticbeanstalk.CfnEnvironment(this, 'Environment', {\renvironmentName: props?.envName ?? \u0026quot;MyWebAppEnvironment\u0026quot;,\rapplicationName: app.applicationName || appName,\rsolutionStackName: '64bit Amazon Linux 2023 v6.0.2 running Node.js 18',\roptionSettings: optionSettingProperties,\rversionLabel: appVersionProps.ref,\r});\r}\r}\r \r"
},
{
	"uri": "/6-createcdkpipelinestack/",
	"title": "Create CICD Pipeline Stack",
	"tags": [],
	"description": "",
	"content": "Defining an Empty Pipeline For this step, we are only creating these predefined stages - Source, Build and UpdatePipelineand hence it is an empty pipeline. In the next section, we will add stages (PublishAssets, Stage1) and actions to it to suit the needs of our application.\n Create new file lib/cdk-pipeline-stack.ts. Replace OWNER and REPO in the code below:  import { CodePipeline, CodePipelineSource, ShellStep } from 'aws-cdk-lib/pipelines';\rimport { Construct } from 'constructs';\rimport { Stack, StackProps } from 'aws-cdk-lib';\r/**\r* The stack that defines the application pipeline\r*/\rexport class CdkPipelineStack extends Stack {\rconstructor(scope: Construct, id: string, props?: StackProps) {\rsuper(scope, id, props);\rconst pipeline = new CodePipeline(this, 'Pipeline', {\r// The pipeline name\rpipelineName: 'MyServicePipeline',\r// How it will be built and synthesized\rsynth: new ShellStep('Synth', {\r// Where the source can be found\rinput: CodePipelineSource.gitHub('OWNER/REPO', 'main'), // Build and run cdk synth\rcommands: [\r'npm ci',\r'npm run build',\r'npx cdk synth'\r],\r}),\r});\r// This is where we add the application stages\r}\r}\r \rThe code defines the following basic properties of the pipeline:\n Name for the pipeline. Where to find the source in GitHub. This is Source stage. Every time we push new commits to this repo, the pipeline is triggered. How to do the build and synthesis. For this use case, the Build stage will install a standard NPM build (this type of build runs npm run build followed by npx cdk synth).  Put the following code in bin/cdk-pipeline-eb-demo.ts. Replace ACCOUNT and the REGION in there.  \r#!/usr/bin/env node\rimport 'source-map-support/register';\rimport * as cdk from 'aws-cdk-lib';\rimport { CdkPipelineStack } from '../lib/cdk-pipeline-stack';\rconst app = new cdk.App();\rnew CdkPipelineStack(app, 'CdkPipelineStack', {\renv: { account: 'ACCOUNT', region: 'REGION' },\r});\rapp.synth();\r \rReplace ACCOUNT with your Account ID and REGION with Region ID, ex: ap-southeast-1 for region Singapore.\n\rCopy your account ID here. Add the following to our cdk.json file in the \u0026ldquo;context\u0026rdquo; section, add a comma accordingly:  \r{\r...\r\u0026quot;context\u0026quot;: {\r\u0026quot;@aws-cdk/core:newStyleStackSynthesis\u0026quot;: true\r}\r}\r \rConnect GitHub to CodePipelines For AWS CodePipeline to read from this GitHub repo, we also need to configure the GitHub personal access token we created earlier. This token should be stored as a plaintext secret (not a JSON secret) in AWS Secrets Manager under the exact name github-token.\n Copy this command.  aws secretsmanager create-secret --name github-token --description \u0026quot;Github access token for cdk\u0026quot; --secret-string GITHUB_ACCESS_TOKEN --region REGION\r \rReplace GITHUB_ACCESS_TOKEN with your plaintext secret had been created at 2.1 Create GitHub repository. Replace REGION with your Region ID, ex: ap-southeast-1. Paste and run it at terminal of your Cloud9 environment.   "
},
{
	"uri": "/7-deployapp/",
	"title": "Deploy application",
	"tags": [],
	"description": "",
	"content": "Bootstrap CDK in Your Account  Copy this command.  npx cdk bootstrap aws://ACCOUNT-NUMBER/REGION\r \rReplace ACCOUNT-NUMBER with your Account ID. Replace REGION with your Region ID Paste and run it in terminal.  5. After bootstraping, go to CloudFormation. You will see a stack name CDKToolkit had been provisioned.\nBuild and Deploy the CDK Application After we have bootstrapped our AWS account and Region, we are ready to build and deploy our CDK application.\n At terminal of Cloud9 environment, build the CDK application.  npm run build\r \rIf there are no errors in our application, this will succeed. We can now push all the code to the GitHub repository.  git add .\rgit commit -m \u0026quot;empty pipeline\u0026quot;\rgit push\r \rInput the GitHub username and access token if necessary.\n\rDeploy the CDK application in AWS.  \rnpx cdk deploy\r \rEnter Y if was requested.\n\rAfter CDK application was deployed in AWS successfully, a CloudFormation name CdkPipelineStack will be created. Go to Stack of CloudFormation to check the result.  This CloudFormation stack will create an Empty CodePipeline name MyServicePipeline. Go to CodePipeline to see your pipeline.  Click to pipeline to see stages.  Add a Deploy Stage for Elastic Beanstalk Environment So far, we have provisioned an empty pipeline, and the pipeline isn’t deploying our web application yet. Now, we will create a stage to deploy application to Elastic Beanstalk.\n Create a new file lib/eb-stage.ts. Put the following code in it:  import { Stage } from 'aws-cdk-lib';\rimport { Construct } from 'constructs';\rimport { EBEnvProps, EBApplnStack } from './eb-appln-stack';\r/**\r* Deployable unit of web service app\r*/\rexport class CdkEBStage extends Stage {\rconstructor(scope: Construct, id: string, props?: EBEnvProps) {\rsuper(scope, id, props);\rconst service = new EBApplnStack(this, 'WebService', {\rminSize : props?.minSize, maxSize : props?.maxSize,\rinstanceTypes : props?.instanceTypes,\renvName : props?.envName\r} );\r}\r}\r \rAdd a new import line at the top of lib/cdk-pipeline-stack.ts.  import { CdkEBStage } from './eb-stage';\r \rAdd the following code after the mentioned comment.  // deploy beanstalk app\r// For environment with all default values:\r// const deploy = new CdkEBStage(this, 'Pre-Prod');\r// For environment with custom AutoScaling group configuration\rconst deploy = new CdkEBStage(this, 'Pre-Prod', { minSize : \u0026quot;1\u0026quot;,\rmaxSize : \u0026quot;2\u0026quot;\r});\rconst deployStage = pipeline.addStage(deploy);  \rRun npm run build and push source code to GitHub repository.  npm run build\rgit add .\rgit commit -m 'Add Pre-Prod stage'\rgit push\r \r"
},
{
	"uri": "/8-checkresult/",
	"title": "Check result",
	"tags": [],
	"description": "",
	"content": "Verify the result In CodePipeline console, once the UpdatePipeline stage picks up new code for an additional stage, it will self-mutate and add 2 new stages, one for the Assets and another for Pre-Prod. Once the UpdatePipeline stage has completed successfully, the pipeline will again run from start. This time it will not stop at UpdatePipeline stage. It will transition further to the new stages Assets and Pre-prod to deploy the Beanstalk application, environment and the MyWebApp application.\n Go to CodePipeline. The new stages Assets and Pre-prod will be added when UpdatePipeline stage is built successfully.   After all of stages in CodePipeline were built, two CloudFormation stacks are created.\n The first stack name Pre-Prod-WebService to create Elastic Beanstalk Application and Environment. The second stack name awseb-e-xxxxxxxxxx-stack to create Auto Scaling Group and Load Balancer for Elastic Beanstalk Environment. Go to Auto Scaling Group and Load Balancer to verify that.    Go to Elastic Beanstalk to verify the result.\n  Click to application name MyWebApp.\n  Click MyWebAppEnvironment environment.\n  Click Domain of environment to see the result of your application.   Congratulation, your CDK Pipeline was created successfully.\nUpdate the Node.js Application Deployment   At ./src/index.html, make the changes you want and save. Ex: Replace Welcome to the FCJ Workshop to Welcome to the FCJ Workshop, this is my first project!!!.\n  Push your source code to GitHub repository.\n  \rgit add . \u0026amp;\u0026amp; git commit -am 'Changing index.html' \u0026amp;\u0026amp; git push\r \rGo to CodePipeline, you will see the commit id with source code which you took the changes, is built.  When all stages are done, reload the domain of Elastic Beanstalk Environment to see the result.  Congratulation, your CDK Pipeline deployed your changing application.\n\r"
},
{
	"uri": "/9-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "Delete CDK Pipeline and CloudFormation stack  At Cloud9 terminal, run this command:  cdk destroy\r \raws cloudformation delete-stack --stack-name Pre-Prod-WebService\r \raws cloudformation delete-stack --stack-name CDKToolkit\r \rConfirm Y if requested.\n\rDelete GitHub token in AWS Secrets Manager.  At Cloud9 terminal, run this command:  aws secretsmanager delete-secret --secret-id github-token --force-delete-without-recovery\r \rDelete Cloud9 Environment.  Go to Cloud9. Select FCJ-Env environment. Click Delete. Confirm Delete to delete.  "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]