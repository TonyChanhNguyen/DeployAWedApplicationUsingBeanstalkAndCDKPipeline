[
{
	"uri": "/vi/1-introduction/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": " CDK: Là một khung phát triển phần mềm giúp bạn xác định và cung cấp cơ sở hạ tầng đám mây bằng code. AWS CodePipeline: Là một dịch vụ CI/CD (Tích hợp và triển khai liên tục) giúp bạn nhanh chóng mô hình hóa và cấu hình các giai đoạn khác nhau của một quá trình phát hành phần mềm và tự động hóa các bước cần thiết để phát hành các bản thay đổi của phần mềm một cách liên tục. CloudFormation: Giúp bạn cấu hình tài nguyên của AWS, cung cấp chúng một cách nhanh chóng và nhất quán, và quản lý chúng trong suốt vòng đời của chúng trên các tài khoản và vùng AWS. Github: Là một dịch vụ giúp bạn lưu trữ và quản lý các kho lưu trữ Git một cách riêng tư. Elastic Beanstalk: Giúp bạn nhanh chóng triển khai và quản lý các ứng dụng trên Điện toán đám mây AWS mà không cần có kiến thức về cơ sở hạn tầng triển khai chúng.   "
},
{
	"uri": "/vi/",
	"title": "Triển khai ứng dụng web với Elasitc Beanstalk và CDK Pipeline",
	"tags": [],
	"description": "",
	"content": "Triển khai ứng dụng web với Elasitc Beanstalk và CDK Pipeline Tổng quan Trong bài thực hành này, chúng ta sẽ khám phá làm thế nào để tạo đường ống CICD bằng CDK để triển khai một ứng dụng lên Elastic Beanstalk một cách tự động. Nội dung  Giới thiệu Chuẩn bị  2.1 Tạo GitHub Repository 2.2 Chuẩn bị môi trường   Xây dựng ứng dụng web Tạo hạ tầng bằng CDK Thêm Elastic BeanStalk vào CDK Tạo CDK Pipeline stack Triển khai ứng dụng Kiểm tra kết quả Dọn dẹp tài nguuyên  "
},
{
	"uri": "/vi/2-preparation/2.1-createrepo/",
	"title": "Tạo GitHub Repository",
	"tags": [],
	"description": "",
	"content": " Đi đến GitHub và đăng nhập. Tạo một repo tên FCJ-CICD-CDK-Beanstalk-Workshop.  3. Sau khi repo được tạo thành công , lưu lại đường dẫn HTTPS để sử dụng sau.\n4. Đi đến GitHub Setting, nhấn Developer settings.\n5. Tại Personal access tokens, chọn Tokens (clasic).\nNhấn Generate new token. Nhấn Generate new token (classic).  8. Nhập Access token for FCJ Workshop tại Note.\n9. Tại Scope, chọn repo (để đọc repository) và admin:repo_hook (nếu bạn có kể hoạch sử dụng webhooks).\n10. Sau đó, nhấn Generate token.\n11. Lưu lại token để sử dụng sau.\n"
},
{
	"uri": "/vi/2-preparation/2.2-setupenv/",
	"title": "Chuẩn bị môi trường",
	"tags": [],
	"description": "",
	"content": " Đi đến Cloud9. Nhấn Create environment.   Nhập tên FCJ-Env.\n  Nhập mô tả Cloud9 environment for FCJ Workshop.\n  Tại Environment type, chọn New EC2 instance.\n  Tại Instance type, chọn Additional instance types.\n  Tại Additional instance types, chọn t2.medium.\n   Kéo xuống.\n  Sau đó, nhấn Create.\n  Sau khi môi trường của bạn được tạo thành công, nhấn Open để truy cập môi trường.\n  11. Trong terminal, kiểm tra phiên bản của npm, cdk và node.\n\rnpm --version\r \rcdk --version\r \rnode --version\r \rNâng cấp phiên bản của npm lên mới nhất.  npm install -g npm@latest\r \rNâng cấp phiên bản của cdk lên mới nhất.  npm install --force -g aws-cdk@latest\r \r"
},
{
	"uri": "/vi/2-preparation/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Tổng quan Trước khi bắt đầu bài thực hành này, chúng ta cần tạo:\n Một GitHub repository để lưu trữ ứng dụng và cơ sở hạ tầng bằng code. Một môi trường phát triển code  Nội dung 2.1 Tạo GitHub Repository.\n2.2 Chuẩn bị môi trường.\n"
},
{
	"uri": "/vi/3-buildapp/",
	"title": "Xây dựng ứng dụng web",
	"tags": [],
	"description": "",
	"content": "Xây dựng ứng dụng web  Tạo đường dẫn mới.  mkdir my_webapp\rcd my_webapp\r \rSau đó khởi tạo dự án Node.js.  npm init -y\r \rTạo ứng dụng Express  Tải Express.  npm install express\r \rSau khi chạy dòng lệnh này, bạn sẽ thấy dependency xuất hiện trong tệp package.json. Thêm vào đó, tập tin node_modules và tệp package-lock.json được tạo.  Tạo tệp mới tên app.js.  touch app.js\r \rChọn tệp app.js và dán đoạn code này. Sau đó lưu.  var express = require('express');\rvar app = express();\rvar fs = require('fs');\rvar port = 8080;\rapp.listen(port, function() {\rconsole.log('Server running at http://127.0.0.1:', port);\r});\r \rTạo một REST API  Thêm đoạn code dưới đây vào tệp app.js.  var express = require('express');\rvar app = express();\rvar fs = require('fs');\rvar port = 8080;\r/*global html*/\r// New code\rapp.get('/test', function (req, res) {\rres.send('the REST endpoint test run!');\r});\rapp.get('/', function (req, res) {\rhtml = fs.readFileSync('index.html');\rres.writeHead(200);\rres.write(html);\rres.end();\r});\rapp.listen(port, function() {\rconsole.log('Server running at http://127.0.0.1:%s', port);\r});\r \rXây dựng nội dung HTML  Tạo tệp tên index.html.  touch index.html\r \rChọn tệp index.html. Sau đó dán đoạn code bên dưới vào và lưu.  \u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;Elastic Beanstalk App\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;Welcome to the FCJ Workshop\u0026lt;/h1\u0026gt;\r\u0026lt;a href=\u0026quot;/test\u0026quot;\u0026gt;Call the test API\u0026lt;/a\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r \rChạy thử đoạn code  Chọn tệp package.json. Thay đổi nội dung tệp package.json và lưu.  \u0026quot;scripts\u0026quot;: {\r\u0026quot;start\u0026quot;: \u0026quot;node app.js\u0026quot;\r},\r \rTại terminal, chạy lệnh.  npm start\r \rĐi đến đường dẫn xuất hiện để thấy kết quả.  "
},
{
	"uri": "/vi/4-createinfrausingcdk/",
	"title": "Tạo hạ tầng bằng CDK",
	"tags": [],
	"description": "",
	"content": "Tạo ứng dụng CDK  Tạo một đường dẫn mới và đi đến đường dẫn đó.  cd ..\rmkdir cdk-pipeline-eb-demo\rcd cdk-pipeline-eb-demo\r \rIf your NodeJS application is still running, press Ctrl + C to stop.\n\rKhởi tạo ứng dụng CDK mà được sử dụng để tạo cơ sở hạ tầng.  npx cdk init app --language typescript\r \rKhởi tạo git repository.  git branch -m main\r \rDi chuyển ứng dụng lên GitHub  Sau khi GitHub repository được tạo, chúng ta sẽ đẩy ứng dụng lên đó. Di chuyển các tệp ứng dụng đến tập tin mới src.  cp -r ../my_webapp ./src\recho '!src/*' \u0026gt;\u0026gt; .gitignore\recho 'src/package-lock.json' \u0026gt;\u0026gt; .gitignore\recho 'src/node_modules' \u0026gt;\u0026gt; .gitignore\r \rĐẩy tất cả các tệp lên GitHub. Thay thế YOUR_USERNAME với github org của bạn và YOUR_REPOSITORY với tên của repository.  git add .\rgit commit -m \u0026quot;initial commit\u0026quot;\rgit remote add origin https://github.com/YOUR_USERNAME/YOUR_REPOSITORY.git git config credential.helper 'cache --timeout=3600'\rgit push -u origin main\r \rBạn sẽ được yêu cầu cung cấp Username và Password.  Mật khẩu là access token của tài khoản GitHub được tạo ra ở bước 2.1- Create GitHub repository\n\rTạo code cho stack tài nguyên Chúng ta sẽ xóa tệp mặc định được tạo ra bởi CDK và triển khai code cho stack tài nguyên ElasticBeanstalk.\n Tại ./cdk-pipeline-eb-demo/lib, xóa tệp cdk-pipeline-eb-demo.ts. Tạo tệp mới tên eb-appln-stack.ts. Dán đoạn code bên dưới và lưu.  import * as cdk from 'aws-cdk-lib';\rimport { Construct } from 'constructs';\r// Add import statements here\rexport interface EBEnvProps extends cdk.StackProps {\r// Autoscaling group configuration\rminSize?: string;\rmaxSize?: string;\rinstanceTypes?: string;\renvName?: string;\r}\rexport class EBApplnStack extends cdk.Stack {\rconstructor(scope: Construct, id: string, props?: EBEnvProps) {\rsuper(scope, id, props);\r// The code that defines your stack goes here\r}\r}\r \rMột stack tài nguyên là một tập hợp các tài nguyên cơ sở hạ tầng đám mây - trong trường hợp này là tất cả tài nguyên AWS — sẽ được cung cấp trong một tài khoản cụ thể. Tài khoản nơi các tài nguyên này sẽ được cung cấp là stack mà bạn đã đặt cấu hình trong điều kiện tiên quyết. Trong stack tài nguyên này, chúng ta sẽ tạo các tài nguyên sau:\n IAM Instance profile and role: Một vùng chưa cho AWS Identity and Access Management (IAM) role mà chúng ta có thể sử dụng để truyền thông tin role đến phiên bản Amazon EC2 khi phiên bản khởi động. S3 Assets: Giúp tải ứng dụng đã nén lên Amazon Simple Storage Service (S3) và sẽ cung cấp cho ứng dụng CDK để lấy vị trí đối tượng. Elastic Beanstalk App: Một tập hợp logic các thành phần Elastic Beanstalk, bao gồm môi trường, phiên bản và cấu hình môi trường. Elastic Beanstalk App Version: Một sự lặp lại cụ thể, được gắn nhãn của code có thể triển khai cho một ứng dụng web. Phiên bản ứng dụng trỏ tới một đối tượng Amazon S3 chứa code có thể triển khai, trong trường hợp này là tệp zip mà chúng tôi sẽ tải lên S3 bằng S3 Assets. Ứng dụng có thể có nhiều phiên bản và mỗi phiên bản ứng dụng là duy nhất. Elastic Beanstalk Environment: Tập hợp các tài nguyên AWS chạy phiên bản ứng dụng. Mỗi môi trường chỉ chạy một phiên bản ứng dụng tại một thời điểm.  Tải ứng dụng lên S3 một cách tự động  Tại tệp lib/eb-appln-stack.ts, thêm đoạn code này ở phần trên của tệp.  import * as s3assets from 'aws-cdk-lib/aws-s3-assets';\r \rDưới đoạn The code that defines your stack goes here, thêm đoạn code này :  // Construct an S3 asset Zip from directory up.\rconst webAppZipArchive = new s3assets.Asset(this, 'WebAppZip', {\rpath: `${__dirname}/../src`,\r});\r \r"
},
{
	"uri": "/vi/5-addbeanstalkcdk/",
	"title": "Thêm Elastic Beanstalk CDK ",
	"tags": [],
	"description": "",
	"content": "Thêm Elastic Beanstalk CDK Dependencies kế tiếp, chúng ta sẽ tạo ứng dụng Elastic Beanstalk, phiên bản ứng dụng, và môi trường để chúng ta có thể triển khai ứng dụng web đã được tải lên S3 bằng S3 Assets.\n Thêm dependency vào Elastic Beanstalk cho CDK tại phần trên của tệp lib/eb-appln-stack.ts.  import * as elasticbeanstalk from 'aws-cdk-lib/aws-elasticbeanstalk';\r \rĐặt code phía dưới code của S3 Assets trong tệp lib/eb-appln-stack.ts file. Đoạn code này sẽ tạo một ứng dụng tên MyWebApp tại Elastic Beanstalk.  const appName = 'MyWebApp';\rconst app = new elasticbeanstalk.CfnApplication(this, 'Application', {\rapplicationName: appName,\r});\r \rTạo phiên bản ứng dụng Elastic Beanstalk Bây giờ chúng ta cần tạo phiên bản ứng dụng Elastic Beanstalk từ tài nguyên trên S3 đã được tạo trước đó.\n Phần code này sẽ tạo phiên bản ứng dụng bằng cách sử dụng S3 bucket name và S3 object key mà S3 Assets và CDK sẽ cũng cấp cho phương thức này.  // Create an app version from the S3 asset defined earlier\rconst appVersionProps = new elasticbeanstalk.CfnApplicationVersion(this, 'AppVersion', {\rapplicationName: appName,\rsourceBundle: {\rs3Bucket: webAppZipArchive.s3BucketName,\rs3Key: webAppZipArchive.s3ObjectKey,\r},\r});\r \rThêm một dependency để đảm bảo rằng ứng dụng Elastic Beanstalk application tồn tại trước khi tạo phiên bản ứng dụng.  // Make sure that Elastic Beanstalk app exists before creating an app version\rappVersionProps.addDependency(app);\r \rTạo Instance Profile Để tạo môi trường Elastic Beanstalk, chúng ta sẽ cần cung cấp một instance profile để thông qua vai trò thông tin đến máy chủ Amazon EC2 khi nó khởi chạy.\n Thêm IAM dependency trong CDK stack.  import * as iam from 'aws-cdk-lib/aws-iam';\r \rTạo phiên bản ứng dụng:  Điều đầu tiên đoạn code làm là tạo ra một IAM role mới (myRole). Để cho phép máy chủ EC2 trong môi trường của chúng ta đảm nhận role, instance profile chỉ định Amazon EC2 với tư cách là một thực thể đáng tin cậy trong chính sách mối quan hệ tin cậy. Với vai trò đó, sau đó chúng ta thêm chính sách được quản lý AWSElasticBeanstalkWebTier. Sau đó chúng ta tạo instance profile với vai trò đó và tên hồ sơ.    // Create role and instance profile\rconst myRole = new iam.Role(this, `${appName}-aws-elasticbeanstalk-ec2-role`, {\rassumedBy: new iam.ServicePrincipal('ec2.amazonaws.com'),\r});\rconst managedPolicy = iam.ManagedPolicy.fromAwsManagedPolicyName('AWSElasticBeanstalkWebTier')\rmyRole.addManagedPolicy(managedPolicy);\rconst myProfileName = `${appName}-InstanceProfile`\rconst instanceProfile = new iam.CfnInstanceProfile(this, myProfileName, {\rinstanceProfileName: myProfileName,\rroles: [\rmyRole.roleName\r]\r});\r \rTạo môi trường Elastic Beanstalk Phần cuối cùng chúng ta cần tạo là môi trường Elastic Beanstalk. Môi trường là một tập hợp các tài nguyên AWS chạy trên một phiên bản ứng dụng. Đối với môi trường, chúng ta sẽ cần cung cấp một số thông tin về cơ sở hạ tầng.\n Để xác định các tùy chọn cấu hình, hãy thêm các dòng code sau:  // Example of some options which can be configured\rconst optionSettingProperties: elasticbeanstalk.CfnEnvironment.OptionSettingProperty[] = [\r{\rnamespace: 'aws:autoscaling:launchconfiguration',\roptionName: 'IamInstanceProfile',\rvalue: myProfileName,\r},\r{\rnamespace: 'aws:autoscaling:asg',\roptionName: 'MinSize',\rvalue: props?.maxSize ?? '1',\r},\r{\rnamespace: 'aws:autoscaling:asg',\roptionName: 'MaxSize',\rvalue: props?.maxSize ?? '1',\r},\r{\rnamespace: 'aws:ec2:instances',\roptionName: 'InstanceTypes',\rvalue: props?.instanceTypes ?? 't2.micro',\r},\r];\r \rThêm các dòng code dưới đây vào tệp lib/eb-appln-stack.ts:  // Create an Elastic Beanstalk environment to run the application\rconst elbEnv = new elasticbeanstalk.CfnEnvironment(this, 'Environment', {\renvironmentName: props?.envName ?? \u0026quot;MyWebAppEnvironment\u0026quot;,\rapplicationName: app.applicationName || appName,\rsolutionStackName: 'SOLUTION-STACK-NAME',\roptionSettings: optionSettingProperties,\rversionLabel: appVersionProps.ref,\r});\r \rThay thế SOLUTION-STACK-NAME với Phiên bản mới nhất của Solution Stack Name được hổ trợ. Tại thời điểm này, phiên bản mới nhất là 64bit Amazon Linux 2023 v6.0.2 running Node.js 18.   Cuối cùng, code của tệp lib/eb-appln-stack.ts: import * as cdk from 'aws-cdk-lib';\rimport { Construct } from 'constructs';\r// Add import statements here\rimport * as s3assets from 'aws-cdk-lib/aws-s3-assets';\rimport * as elasticbeanstalk from 'aws-cdk-lib/aws-elasticbeanstalk';\rimport * as iam from 'aws-cdk-lib/aws-iam';\rexport interface EBEnvProps extends cdk.StackProps {\r// Autoscaling group configuration\rminSize?: string;\rmaxSize?: string;\rinstanceTypes?: string;\renvName?: string;\r}\rexport class EBApplnStack extends cdk.Stack {\rconstructor(scope: Construct, id: string, props?: EBEnvProps) {\rsuper(scope, id, props);\r// The code that defines your stack goes here\r// Construct an S3 asset Zip from directory up.\rconst webAppZipArchive = new s3assets.Asset(this, 'WebAppZip', {\rpath: `${__dirname}/../src`,\r});\rconst appName = 'MyWebApp';\rconst app = new elasticbeanstalk.CfnApplication(this, 'Application', {\rapplicationName: appName,\r});\r// Create an app version from the S3 asset defined earlier\rconst appVersionProps = new elasticbeanstalk.CfnApplicationVersion(this, 'AppVersion', {\rapplicationName: appName,\rsourceBundle: {\rs3Bucket: webAppZipArchive.s3BucketName,\rs3Key: webAppZipArchive.s3ObjectKey,\r},\r});\r// Make sure that Elastic Beanstalk app exists before creating an app version\rappVersionProps.addDependency(app);\r// Create role and instance profile\rconst myRole = new iam.Role(this, `${appName}-aws-elasticbeanstalk-ec2-role`, {\rassumedBy: new iam.ServicePrincipal('ec2.amazonaws.com'),\r});\rconst managedPolicy = iam.ManagedPolicy.fromAwsManagedPolicyName('AWSElasticBeanstalkWebTier')\rmyRole.addManagedPolicy(managedPolicy);\rconst myProfileName = `${appName}-InstanceProfile`\rconst instanceProfile = new iam.CfnInstanceProfile(this, myProfileName, {\rinstanceProfileName: myProfileName,\rroles: [\rmyRole.roleName\r]\r});\r// Example of some options which can be configured\rconst optionSettingProperties: elasticbeanstalk.CfnEnvironment.OptionSettingProperty[] = [\r{\rnamespace: 'aws:autoscaling:launchconfiguration',\roptionName: 'IamInstanceProfile',\rvalue: myProfileName,\r},\r{\rnamespace: 'aws:autoscaling:asg',\roptionName: 'MinSize',\rvalue: props?.maxSize ?? '1',\r},\r{\rnamespace: 'aws:autoscaling:asg',\roptionName: 'MaxSize',\rvalue: props?.maxSize ?? '1',\r},\r{\rnamespace: 'aws:ec2:instances',\roptionName: 'InstanceTypes',\rvalue: props?.instanceTypes ?? 't2.micro',\r},\r];\r// Create an Elastic Beanstalk environment to run the application\rconst elbEnv = new elasticbeanstalk.CfnEnvironment(this, 'Environment', {\renvironmentName: props?.envName ?? \u0026quot;MyWebAppEnvironment\u0026quot;,\rapplicationName: app.applicationName || appName,\rsolutionStackName: '64bit Amazon Linux 2023 v6.0.2 running Node.js 18',\roptionSettings: optionSettingProperties,\rversionLabel: appVersionProps.ref,\r});\r}\r}\r \r"
},
{
	"uri": "/vi/6-createcdkpipelinestack/",
	"title": "Tạo CICD Pipeline Stack",
	"tags": [],
	"description": "",
	"content": "Xác định một đường ống rỗng Ở bước này, chúng ta chỉ đang tạo các giai đoạn này - Source, Build và UpdatePipelineand thì thế nó là một đường ống rỗng. Trong phần tiếp theo, chúng ta sẽ thêm các giai đoạn (PublishAssets, Stage1) và hành động phù hợp với nhu cầu của ứng dụng.\n Tạo tệp mới lib/cdk-pipeline-stack.ts. Thay thế OWNER và REPO ở đoạn code bên dưới:  import { CodePipeline, CodePipelineSource, ShellStep } from 'aws-cdk-lib/pipelines';\rimport { Construct } from 'constructs';\rimport { Stack, StackProps } from 'aws-cdk-lib';\r/**\r* The stack that defines the application pipeline\r*/\rexport class CdkPipelineStack extends Stack {\rconstructor(scope: Construct, id: string, props?: StackProps) {\rsuper(scope, id, props);\rconst pipeline = new CodePipeline(this, 'Pipeline', {\r// The pipeline name\rpipelineName: 'MyServicePipeline',\r// How it will be built and synthesized\rsynth: new ShellStep('Synth', {\r// Where the source can be found\rinput: CodePipelineSource.gitHub('OWNER/REPO', 'main'), // Build and run cdk synth\rcommands: [\r'npm ci',\r'npm run build',\r'npx cdk synth'\r],\r}),\r});\r// This is where we add the application stages\r}\r}\r \rCode xác định các thuộc tính cơ bản của đường ống như sau:\n Tên của đường ống. Nơi để tìm nguồn trong GitHub. Đây là giai đoạn Source. Mỗi lần chúng ta đẩy commit mới lên repo, đường ống sẽ được kích hoạt. Cách thực hiện việc xây dựng và tổng hợp. Trong trường hợp này, giai đoạn Build sẽ tải một kiến trúc NPM (kiểu xây dựng này chạy npm run build theo sau là npx cdk synth).  Dán đoạn code dưới đây vào file bin/cdk-pipeline-eb-demo.ts. Thay thế ACCOUNT và REGION.  \r#!/usr/bin/env node\rimport 'source-map-support/register';\rimport * as cdk from 'aws-cdk-lib';\rimport { CdkPipelineStack } from '../lib/cdk-pipeline-stack';\rconst app = new cdk.App();\rnew CdkPipelineStack(app, 'CdkPipelineStack', {\renv: { account: 'ACCOUNT', region: 'REGION' },\r});\rapp.synth();\r \rThay thế ACCOUNT với Account ID của bạn và REGION với Region ID, Ví dụ: ap-southeast-1 cho vùng Singapore.\n\rSao chép account ID của bạn tại đây. Thêm đoạn bên dưới vào tệp cdk.json trong phần \u0026ldquo;context\u0026rdquo;:  \r{\r...\r\u0026quot;context\u0026quot;: {\r\u0026quot;@aws-cdk/core:newStyleStackSynthesis\u0026quot;: true\r}\r}\r \rKết nối GitHub đến CodePipelines For AWS CodePipeline to read from this GitHub repo, we also need to configure the GitHub personal access token we created earlier. This token should be stored as a plaintext secret (not a JSON secret) in AWS Secrets Manager under the exact name github-token. Để AWS CodePipeline đọc từ kho lưu trữ GitHub này, chúng ta cũng cần định cấu hình access token cá nhân GitHub mà chúng ta đã tạo trước đó. Token này phải được lưu trữ dưới dạng bí mật văn bản gốc (không phải bí mật JSON) trong AWS Secrets Manager dưới tên chính xác là github-token.\n Sao chép đoạn mã này.  aws secretsmanager create-secret --name github-token --description \u0026quot;Github access token for cdk\u0026quot; --secret-string GITHUB_ACCESS_TOKEN --region REGION\r \rThay thế GITHUB_ACCESS_TOKEN với access token được tạo tại 2.1 Create GitHub repository. Thay thế REGION với Region ID của bạn, Ví dụ: ap-southeast-1. Dán và chạy tại terminal của Cloud9.   "
},
{
	"uri": "/vi/7-deployapp/",
	"title": "Triển khai ứng dụng",
	"tags": [],
	"description": "",
	"content": "Khởi động CDK trong tài khoản của bạn  Sao chép đoạn mã này.  npx cdk bootstrap aws://ACCOUNT-NUMBER/REGION\r \rThay thế ACCOUNT-NUMBER với Account ID. Thay thế REGION với Region ID Dán và chạy tại terminal.  5. Sau khi khởi động, đi đến CloudFormation. Bạn sẽ thấy một stack tên là CDKToolkit vừa được tạo.\nXây dựng và triển khai ứng dụng CDK Sau khi chúng ta khởi động xong tài khoản và vùng AWS, chúng ta đã sẵn sàng xây dựng và triển khai ứng dụng CDK.\n Tại terminal của Cloud9, xây dựng ứng dụng CDK.  npm run build\r \rNếu không xuất hiện lỗi thì quá trình này đã thành công. Bây giờ chúng ta có thể đẩy tất cả code lên GitHub repository.  git add .\rgit commit -m \u0026quot;empty pipeline\u0026quot;\rgit push\r \rNhập GitHub username và access token nếu được yêu cầu.\n\rTriển khai ứng dụng CDK lên AWS.  \rnpx cdk deploy\r \rNhập Y nếu được yêu cầu.\n\rSau khi ứng dụng CDK được triển khai lên AWS thành công, một CloudFormation tên CdkPipelineStack sẽ được tạo. Đi đến Stack of CloudFormation để kiểm tra.  CloudFormation stack này sẽ tạo một Empty CodePipeline tên MyServicePipeline. Đi đến CodePipeline để thấy đường ống của bạn.  Nhấn vào pipeline để thấy các giai đoạn.  Thêm một giai đoạn Deploy cho môi trường Elastic Beanstalk Cho đến nay, chúng ta đã cung cấp một đường ống rỗng và đường ống đó vẫn chưa triển khai ứng dụng web của chúng ta. Bây giờ, chúng ta sẽ tạo một giai đoạn để triển khai ứng dụng lên Elastic Beanstalk.\n Tạo một tệp mới lib/eb-stage.ts. Dán đoạn code bên dưới:  import { Stage } from 'aws-cdk-lib';\rimport { Construct } from 'constructs';\rimport { EBEnvProps, EBApplnStack } from './eb-appln-stack';\r/**\r* Deployable unit of web service app\r*/\rexport class CdkEBStage extends Stage {\rconstructor(scope: Construct, id: string, props?: EBEnvProps) {\rsuper(scope, id, props);\rconst service = new EBApplnStack(this, 'WebService', {\rminSize : props?.minSize, maxSize : props?.maxSize,\rinstanceTypes : props?.instanceTypes,\renvName : props?.envName\r} );\r}\r}\r \rThêm dòng code mới vào lib/cdk-pipeline-stack.ts.  import { CdkEBStage } from './eb-stage';\r \rThêm đoạn code vào phần bên dưới của đoạn This is where we add the application stages.  // deploy beanstalk app\r// For environment with all default values:\r// const deploy = new CdkEBStage(this, 'Pre-Prod');\r// For environment with custom AutoScaling group configuration\rconst deploy = new CdkEBStage(this, 'Pre-Prod', { minSize : \u0026quot;1\u0026quot;,\rmaxSize : \u0026quot;2\u0026quot;\r});\rconst deployStage = pipeline.addStage(deploy);  \rChạy npm run build và đẩy code lên GitHub repository.  npm run build\rgit add .\rgit commit -m 'Add Pre-Prod stage'\rgit push\r \r"
},
{
	"uri": "/vi/8-checkresult/",
	"title": "Kiểm tra kết quả",
	"tags": [],
	"description": "",
	"content": "Kiểm tra kết quả Tại bảng điều khiển CodePipeline, sau khi giai đoạn UpdatePipeline chọn code mới cho giai đoạn bổ sung, nó sẽ tự thay đổi và thêm 2 giai đoạn mới, một cho Assets và Pre-Prod. Sau khi giai đoạn UpdatePipeline hoàn tất thành công, quy trình sẽ chạy lại từ đầu. Lần này nó sẽ không dừng lại ở giai đoạn UpdatePipeline. Nó sẽ chuyển tiếp sang các giai đoạn mới Assets và Pre-prod để triển khai ứng dụng, môi trường Beanstalk và ứng dụng MyWebApp.\n Đi đến CodePipeline. Các giai đoạn Assets và Pre-prod sẽ được thêm vào khi giai đoạn UpdatePipeline được xây dựng thành công.   Sau khi tất cả các giai đoạn trong CodePipeline được xây dựng, hai CloudFormation stacks được tạo.\n Stack đầu tiên tên Pre-Prod-WebService để tạo Elastic Beanstalk Application và Environment. Stack thứ hai tên awseb-e-xxxxxxxxxx-stack để tạo Auto Scaling Group và Load Balancer cho Elastic Beanstalk Environment. Đi đến Auto Scaling Group và Load Balancer để kiểm tra điều đó.    Đi đến Elastic Beanstalk để kiểm tra kết quả.\n  Nhấn vào ứng dụng tên MyWebApp.\n  Nhấn vào môi trường MyWebAppEnvironment.\n  Nhấn Domain của môi trường để thấy kết quả của ứng dụng.   Xin chúc mừng, CDK Pipeline của bạn đã được tạo thành công.\nCập nhật triển khai ứng dụng Node.js   Tại ./src/index.html, tạo sự thay đổi và lưu lại. Ví dụ: Thay thế Welcome to the FCJ Workshop thành Welcome to the FCJ Workshop, this is my first project!!!.\n  Đẩy code của bạn lên GitHub repository.\n  \rgit add . \u0026amp;\u0026amp; git commit -am 'Changing index.html' \u0026amp;\u0026amp; git push\r \rĐi đến CodePipeline, bạn sẽ thấy commit id với code mà bạn đã thay đổi đang được xây dựng.  Khi tất cả các giai đoạn hoàn tất, tải lại đường dẫn của Elastic Beanstalk Environment để thấy kết quả.  Xin chúc mừng, CDK Pipeline của bạn đã triển khai phiên bản ứng dụng mà bạn đã thay đổi.\n\r"
},
{
	"uri": "/vi/9-cleanup/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Xóa CDK Pipeline và CloudFormation stack  Tại Cloud9 terminal, chạy đoạn lệnh này:  cdk destroy\r \raws cloudformation delete-stack --stack-name Pre-Prod-WebService\r \raws cloudformation delete-stack --stack-name CDKToolkit\r \rXác nhận Y nếu được yêu cầu.\n\rXóa GitHub token trong AWS Secrets Manager  Tại Cloud9 terminal, chạy đoạn lệnh này:  aws secretsmanager delete-secret --secret-id github-token --force-delete-without-recovery\r \rXóa môi trường Cloud9  Đi đến Cloud9. Chọn môi trường FCJ-Env. Nhấn Delete. Xác nhận Delete để xóa.  "
},
{
	"uri": "/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]